%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: figures.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Roman Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o figures.ps figures.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.08.11:1203
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 /gnudict 256 dict def gnudict begin /Color false def /Solid false
def /gnulinewidth 5.000 def /userlinewidth gnulinewidth def /vshift
-33 def /dl {10 mul} def /hpt_ 31.5 def /vpt_ 31.5 def /hpt hpt_ def
/vpt vpt_ def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M   0 vshift R show } def /Rshow {
currentpoint stroke M   dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M   dup stringwidth pop -2 div vshift
R show } def /UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def /DL { Color {setrgbcolor
Solid {pop []} if 0 setdash }  {pop pop pop Solid {pop []} if 0 setdash}
ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth } def /AL
{ stroke gnulinewidth 2 div setlinewidth } def /UL { gnulinewidth mul
/userlinewidth exch def } def /PL { stroke userlinewidth setlinewidth
} def /LTb { BL [] 0 0 0 DL } def /LTa { AL [1 dl 2 dl] 0 setdash 0
0 0 setrgbcolor } def /LT0 { PL [] 1 0 0 DL } def /LT1 { PL [4 dl 2
dl] 0 1 0 DL } def /LT2 { PL [2 dl 3 dl] 0 0 1 DL } def /LT3 { PL [1
dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL
} def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def /LT6 { PL [2 dl
2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl
4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl
4 dl] 0.5 0.5 0.5 DL } def /Pnt { stroke [] 0 setdash    gsave 1 setlinecap
M 0 0 V stroke grestore } def /Dia { stroke [] 0 setdash 2 copy vpt
add M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath
stroke   Pnt } def /Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V  
currentpoint stroke M   hpt neg vpt neg R hpt2 0 V stroke   } def /Box
{ stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M   0 vpt2 neg
V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath stroke   Pnt } def /Crs
{ stroke [] 0 setdash exch hpt sub exch vpt add M   hpt2 vpt2 neg V
currentpoint stroke M   hpt2 neg 0 R hpt2 vpt2 V stroke } def /TriU
{ stroke [] 0 setdash 2 copy vpt 1.12 mul add M   hpt neg vpt -1.62
mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath stroke   Pnt
 } def /Star { 2 copy Pls Crs } def /BoxF { stroke [] 0 setdash exch
hpt sub exch vpt add M   0 vpt2 neg V  hpt2 0 V  0 vpt2 V   hpt2 neg
0 V  closepath fill } def /TriUF { stroke [] 0 setdash vpt 1.12 mul
add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62
mul V closepath fill } def /TriD { stroke [] 0 setdash 2 copy vpt 1.12
mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62
mul V closepath stroke   Pnt  } def /TriDF { stroke [] 0 setdash vpt
1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt
-1.62 mul V closepath fill} def /DiaF { stroke [] 0 setdash vpt add
M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath
fill } def /Pent { stroke [] 0 setdash 2 copy gsave   translate 0 hpt
M 4 {72 rotate 0 hpt L} repeat   closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave   translate 0 hpt M 4 {72 rotate
0 hpt L} repeat   closepath fill grestore } def /Circle { stroke []
0 setdash 2 copy   hpt 0 360 arc stroke Pnt } def /CircleF { stroke
[] 0 setdash hpt 0 360 arc fill } def /C0 { BL [] 0 setdash 2 copy
moveto vpt 90 450  arc } bind def /C1 { BL [] 0 setdash 2 copy    
   moveto        2 copy  vpt 0 90 arc closepath fill              
 vpt 0 360 arc closepath } bind def /C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill                vpt 0 360
arc closepath } bind def /C3 { BL [] 0 setdash 2 copy moveto      
 2 copy  vpt 0 180 arc closepath fill                vpt 0 360 arc
closepath } bind def /C4 { BL [] 0 setdash 2 copy moveto        2 copy
 vpt 180 270 arc closepath fill                vpt 0 360 arc closepath
} bind def /C5 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0
90 arc        2 copy moveto        2 copy  vpt 180 270 arc closepath
fill                vpt 0 360 arc } bind def /C6 { BL [] 0 setdash
2 copy moveto       2 copy  vpt 90 270 arc closepath fill         
     vpt 0 360 arc closepath } bind def /C7 { BL [] 0 setdash 2 copy
moveto       2 copy  vpt 0 270 arc closepath fill               vpt
0 360 arc closepath } bind def /C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill               vpt 0 360
arc closepath } bind def /C9 { BL [] 0 setdash 2 copy moveto      
2 copy  vpt 270 450 arc closepath fill               vpt 0 360 arc
closepath } bind def /C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt
270 360 arc closepath fill        2 copy moveto        2 copy vpt 90
180 arc closepath fill                vpt 0 360 arc closepath } bind
def /C11 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0 180 arc
closepath fill        2 copy moveto        2 copy  vpt 270 360 arc
closepath fill                vpt 0 360 arc closepath } bind def /C12
{ BL [] 0 setdash 2 copy moveto        2 copy  vpt 180 360 arc closepath
fill                vpt 0 360 arc closepath } bind def /C13 { BL []
0 setdash  2 copy moveto        2 copy  vpt 0 90 arc closepath fill
       2 copy moveto        2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def /C14 { BL [] 0 setdash
2 copy moveto        2 copy  vpt 90 360 arc closepath fill        
       vpt 0 360 arc } bind def /C15 { BL [] 0 setdash 2 copy vpt 0
360 arc closepath fill                vpt 0 360 arc closepath } bind
def /Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def /Square { dup Rec } bind
def /Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def /S0
{ BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def /S2
{ BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare
} bind def /S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt
Rec fill Bsquare } bind def /S4 { BL [] 0 setdash 2 copy exch vpt sub
exch vpt sub vpt Square fill Bsquare } bind def /S5 { BL [] 0 setdash
2 copy 2 copy vpt Square fill        exch vpt sub exch vpt sub vpt
Square fill Bsquare } bind def /S6 { BL [] 0 setdash 2 copy exch vpt
sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def /S7 { BL [] 0
setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill        2
copy vpt Square fill        Bsquare } bind def /S8 { BL [] 0 setdash
2 copy vpt sub vpt Square fill Bsquare } bind def /S9 { BL [] 0 setdash
2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def /S10 { BL [] 0
setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt
Square fill        Bsquare } bind def /S11 { BL [] 0 setdash 2 copy
vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def /S12 { BL [] 0 setdash 2 copy exch vpt sub
exch vpt sub vpt2 vpt Rec fill Bsquare } bind def /S13 { BL [] 0 setdash
2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill        2 copy vpt
Square fill Bsquare } bind def /S14 { BL [] 0 setdash 2 copy exch vpt
sub exch vpt sub vpt2 vpt Rec fill        2 copy exch vpt sub exch
vpt Square fill Bsquare } bind def /S15 { BL [] 0 setdash 2 copy Bsquare
fill Bsquare } bind def /D0 { gsave translate 45 rotate 0 0 S0 stroke
grestore } bind def /D1 { gsave translate 45 rotate 0 0 S1 stroke grestore
} bind def /D2 { gsave translate 45 rotate 0 0 S2 stroke grestore }
bind def /D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind
def /D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def /D6
{ gsave translate 45 rotate 0 0 S6 stroke grestore } bind def /D7 {
gsave translate 45 rotate 0 0 S7 stroke grestore } bind def /D8 { gsave
translate 45 rotate 0 0 S8 stroke grestore } bind def /D9 { gsave translate
45 rotate 0 0 S9 stroke grestore } bind def /D10 { gsave translate
45 rotate 0 0 S10 stroke grestore } bind def /D11 { gsave translate
45 rotate 0 0 S11 stroke grestore } bind def /D12 { gsave translate
45 rotate 0 0 S12 stroke grestore } bind def /D13 { gsave translate
45 rotate 0 0 S13 stroke grestore } bind def /D14 { gsave translate
45 rotate 0 0 S14 stroke grestore } bind def /D15 { gsave translate
45 rotate 0 0 S15 stroke grestore } bind def /DiaE { stroke [] 0 setdash
vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt
V closepath stroke } def /BoxE { stroke [] 0 setdash exch hpt sub exch
vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath
stroke } def /TriUE { stroke [] 0 setdash vpt 1.12 mul add M   hpt
neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath
stroke } def /TriDE { stroke [] 0 setdash vpt 1.12 mul sub M   hpt
neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62 mul V closepath
stroke } def /PentE { stroke [] 0 setdash gsave   translate 0 hpt M
4 {72 rotate 0 hpt L} repeat   closepath stroke grestore } def /CircE
{ stroke [] 0 setdash   hpt 0 360 arc stroke } def /Opaque { gsave
closepath 1 setgray fill grestore 0 setgray closepath } def /DiaW {
stroke [] 0 setdash vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt
vpt V hpt neg vpt V Opaque stroke } def /BoxW { stroke [] 0 setdash
exch hpt sub exch vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2
neg 0 V Opaque stroke } def /TriUW { stroke [] 0 setdash vpt 1.12 mul
add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62
mul V Opaque stroke } def /TriDW { stroke [] 0 setdash vpt 1.12 mul
sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62
mul V Opaque stroke } def /PentW { stroke [] 0 setdash gsave   translate
0 hpt M 4 {72 rotate 0 hpt L} repeat   Opaque stroke grestore } def
/CircW { stroke [] 0 setdash   hpt 0 360 arc Opaque stroke } def /BoxFill
{ gsave Rec 1 setgray fill grestore } def end

 /gnudict 256 dict def gnudict begin /Color false def /Solid false
def /gnulinewidth 5.000 def /userlinewidth gnulinewidth def /vshift
-33 def /dl {10 mul} def /hpt_ 31.5 def /vpt_ 31.5 def /hpt hpt_ def
/vpt vpt_ def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M   0 vshift R show } def /Rshow {
currentpoint stroke M   dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M   dup stringwidth pop -2 div vshift
R show } def /UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def /DL { Color {setrgbcolor
Solid {pop []} if 0 setdash }  {pop pop pop Solid {pop []} if 0 setdash}
ifelse } def /BL { stroke userlinewidth 2 mul setlinewidth } def /AL
{ stroke userlinewidth 2 div setlinewidth } def /UL { dup gnulinewidth
mul /userlinewidth exch def       10 mul /udl exch def } def /PL {
stroke userlinewidth setlinewidth } def /LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def /LT0
{ PL [] 1 0 0 DL } def /LT1 { PL [4 dl 2 dl] 0 1 0 DL } def /LT2 {
PL [2 dl 3 dl] 0 0 1 DL } def /LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def /LT5 { PL [4 dl 3 dl
1 dl 3 dl] 1 1 0 DL } def /LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL
} def /LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def /LT8
{ PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash    gsave 1 setlinecap M 0 0 V stroke grestore
} def /Dia { stroke [] 0 setdash 2 copy vpt add M   hpt neg vpt neg
V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath stroke   Pnt }
def /Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V   currentpoint stroke
M   hpt neg vpt neg R hpt2 0 V stroke   } def /Box { stroke [] 0 setdash
2 copy exch hpt sub exch vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke   Pnt } def /Crs { stroke [] 0 setdash
exch hpt sub exch vpt add M   hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def /TriU { stroke [] 0 setdash
2 copy vpt 1.12 mul add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke   Pnt  } def /Star { 2 copy
Pls Crs } def /BoxF { stroke [] 0 setdash exch hpt sub exch vpt add
M   0 vpt2 neg V  hpt2 0 V  0 vpt2 V   hpt2 neg 0 V  closepath fill
} def /TriUF { stroke [] 0 setdash vpt 1.12 mul add M   hpt neg vpt
-1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath fill
} def /TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M   hpt neg
vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62 mul V closepath
stroke   Pnt  } def /TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62 mul V
closepath fill} def /DiaF { stroke [] 0 setdash vpt add M   hpt neg
vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath fill }
def /Pent { stroke [] 0 setdash 2 copy gsave   translate 0 hpt M 4
{72 rotate 0 hpt L} repeat   closepath stroke grestore Pnt } def /PentF
{ stroke [] 0 setdash gsave   translate 0 hpt M 4 {72 rotate 0 hpt
L} repeat   closepath fill grestore } def /Circle { stroke [] 0 setdash
2 copy   hpt 0 360 arc stroke Pnt } def /CircleF { stroke [] 0 setdash
hpt 0 360 arc fill } def /C0 { BL [] 0 setdash 2 copy moveto vpt 90
450  arc } bind def /C1 { BL [] 0 setdash 2 copy        moveto    
   2 copy  vpt 0 90 arc closepath fill                vpt 0 360 arc
closepath } bind def /C2 { BL [] 0 setdash 2 copy moveto        2 copy
 vpt 90 180 arc closepath fill                vpt 0 360 arc closepath
} bind def /C3 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0
180 arc closepath fill                vpt 0 360 arc closepath } bind
def /C4 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 180 270
arc closepath fill                vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0 90 arc   
    2 copy moveto        2 copy  vpt 180 270 arc closepath fill   
            vpt 0 360 arc } bind def /C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill               vpt 0 360
arc closepath } bind def /C7 { BL [] 0 setdash 2 copy moveto      
2 copy  vpt 0 270 arc closepath fill               vpt 0 360 arc closepath
} bind def /C8 { BL [] 0 setdash 2 copy moveto       2 copy vpt 270
360 arc closepath fill               vpt 0 360 arc closepath } bind
def /C9 { BL [] 0 setdash 2 copy moveto       2 copy  vpt 270 450 arc
closepath fill               vpt 0 360 arc closepath } bind def /C10
{ BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto        2 copy vpt 90 180 arc closepath fill  
             vpt 0 360 arc closepath } bind def /C11 { BL [] 0 setdash
2 copy moveto        2 copy  vpt 0 180 arc closepath fill        2
copy moveto        2 copy  vpt 270 360 arc closepath fill         
      vpt 0 360 arc closepath } bind def /C12 { BL [] 0 setdash 2 copy
moveto        2 copy  vpt 180 360 arc closepath fill              
 vpt 0 360 arc closepath } bind def /C13 { BL [] 0 setdash  2 copy
moveto        2 copy  vpt 0 90 arc closepath fill        2 copy moveto
       2 copy  vpt 180 360 arc closepath fill                vpt 0
360 arc closepath } bind def /C14 { BL [] 0 setdash 2 copy moveto 
      2 copy  vpt 90 360 arc closepath fill                vpt 0 360
arc } bind def /C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath
fill                vpt 0 360 arc closepath } bind def /Rec   { newpath
4 2 roll moveto 1 index 0 rlineto 0 exch rlineto        neg 0 rlineto
closepath } bind def /Square { dup Rec } bind def /Bsquare { vpt sub
exch vpt sub exch vpt2 Square } bind def /S0 { BL [] 0 setdash 2 copy
moveto 0 vpt rlineto BL Bsquare } bind def /S1 { BL [] 0 setdash 2
copy vpt Square fill Bsquare } bind def /S2 { BL [] 0 setdash 2 copy
exch vpt sub exch vpt Square fill Bsquare } bind def /S3 { BL [] 0
setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill
Bsquare } bind def /S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec
fill Bsquare } bind def /S7 { BL [] 0 setdash 2 copy exch vpt sub exch
vpt sub vpt vpt2 Rec fill        2 copy vpt Square fill        Bsquare
} bind def /S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare
} bind def /S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare
} bind def /S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2
copy exch vpt sub exch vpt Square fill        Bsquare } bind def /S11
{ BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub
exch vpt2 vpt Rec fill        Bsquare } bind def /S12 { BL [] 0 setdash
2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec
fill        2 copy vpt Square fill Bsquare } bind def /S14 { BL []
0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill      
 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def /S15 {
BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def /D0 { gsave
translate 45 rotate 0 0 S0 stroke grestore } bind def /D1 { gsave translate
45 rotate 0 0 S1 stroke grestore } bind def /D2 { gsave translate 45
rotate 0 0 S2 stroke grestore } bind def /D3 { gsave translate 45 rotate
0 0 S3 stroke grestore } bind def /D4 { gsave translate 45 rotate 0
0 S4 stroke grestore } bind def /D5 { gsave translate 45 rotate 0 0
S5 stroke grestore } bind def /D6 { gsave translate 45 rotate 0 0 S6
stroke grestore } bind def /D7 { gsave translate 45 rotate 0 0 S7 stroke
grestore } bind def /D8 { gsave translate 45 rotate 0 0 S8 stroke grestore
} bind def /D9 { gsave translate 45 rotate 0 0 S9 stroke grestore }
bind def /D10 { gsave translate 45 rotate 0 0 S10 stroke grestore }
bind def /D11 { gsave translate 45 rotate 0 0 S11 stroke grestore }
bind def /D12 { gsave translate 45 rotate 0 0 S12 stroke grestore }
bind def /D13 { gsave translate 45 rotate 0 0 S13 stroke grestore }
bind def /D14 { gsave translate 45 rotate 0 0 S14 stroke grestore }
bind def /D15 { gsave translate 45 rotate 0 0 S15 stroke grestore }
bind def /DiaE { stroke [] 0 setdash vpt add M   hpt neg vpt neg V
hpt vpt neg V   hpt vpt V hpt neg vpt V closepath stroke } def /BoxE
{ stroke [] 0 setdash exch hpt sub exch vpt add M   0 vpt2 neg V hpt2
0 V 0 vpt2 V   hpt2 neg 0 V closepath stroke } def /TriUE { stroke
[] 0 setdash vpt 1.12 mul add M   hpt neg vpt -1.62 mul V   hpt 2 mul
0 V   hpt neg vpt 1.62 mul V closepath stroke } def /TriDE { stroke
[] 0 setdash vpt 1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul
0 V   hpt neg vpt -1.62 mul V closepath stroke } def /PentE { stroke
[] 0 setdash gsave   translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def /CircE { stroke [] 0 setdash   hpt
0 360 arc stroke } def /Opaque { gsave closepath 1 setgray fill grestore
0 setgray closepath } def /DiaW { stroke [] 0 setdash vpt add M   hpt
neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V Opaque stroke
} def /BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M   0 vpt2
neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V Opaque stroke } def /TriUW {
stroke [] 0 setdash vpt 1.12 mul add M   hpt neg vpt -1.62 mul V  
hpt 2 mul 0 V   hpt neg vpt 1.62 mul V Opaque stroke } def /TriDW {
stroke [] 0 setdash vpt 1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt
2 mul 0 V   hpt neg vpt -1.62 mul V Opaque stroke } def /PentW { stroke
[] 0 setdash gsave   translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def /CircW { stroke [] 0 setdash   hpt 0
360 arc Opaque stroke } def /BoxFill { gsave Rec 1 setgray fill grestore
} def end

 /gnudict 256 dict def gnudict begin /Color false def /Solid false
def /gnulinewidth 5.000 def /userlinewidth gnulinewidth def /vshift
-33 def /dl {10 mul} def /hpt_ 31.5 def /vpt_ 31.5 def /hpt hpt_ def
/vpt vpt_ def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M   0 vshift R show } def /Rshow {
currentpoint stroke M   dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M   dup stringwidth pop -2 div vshift
R show } def /UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def /DL { Color {setrgbcolor
Solid {pop []} if 0 setdash }  {pop pop pop Solid {pop []} if 0 setdash}
ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth } def /AL
{ stroke gnulinewidth 2 div setlinewidth } def /UL { gnulinewidth mul
/userlinewidth exch def } def /PL { stroke userlinewidth setlinewidth
} def /LTb { BL [] 0 0 0 DL } def /LTa { AL [1 dl 2 dl] 0 setdash 0
0 0 setrgbcolor } def /LT0 { PL [] 1 0 0 DL } def /LT1 { PL [4 dl 2
dl] 0 1 0 DL } def /LT2 { PL [2 dl 3 dl] 0 0 1 DL } def /LT3 { PL [1
dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL
} def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def /LT6 { PL [2 dl
2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl
4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl
4 dl] 0.5 0.5 0.5 DL } def /Pnt { stroke [] 0 setdash    gsave 1 setlinecap
M 0 0 V stroke grestore } def /Dia { stroke [] 0 setdash 2 copy vpt
add M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath
stroke   Pnt } def /Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V  
currentpoint stroke M   hpt neg vpt neg R hpt2 0 V stroke   } def /Box
{ stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M   0 vpt2 neg
V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath stroke   Pnt } def /Crs
{ stroke [] 0 setdash exch hpt sub exch vpt add M   hpt2 vpt2 neg V
currentpoint stroke M   hpt2 neg 0 R hpt2 vpt2 V stroke } def /TriU
{ stroke [] 0 setdash 2 copy vpt 1.12 mul add M   hpt neg vpt -1.62
mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath stroke   Pnt
 } def /Star { 2 copy Pls Crs } def /BoxF { stroke [] 0 setdash exch
hpt sub exch vpt add M   0 vpt2 neg V  hpt2 0 V  0 vpt2 V   hpt2 neg
0 V  closepath fill } def /TriUF { stroke [] 0 setdash vpt 1.12 mul
add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62
mul V closepath fill } def /TriD { stroke [] 0 setdash 2 copy vpt 1.12
mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62
mul V closepath stroke   Pnt  } def /TriDF { stroke [] 0 setdash vpt
1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt
-1.62 mul V closepath fill} def /DiaF { stroke [] 0 setdash vpt add
M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath
fill } def /Pent { stroke [] 0 setdash 2 copy gsave   translate 0 hpt
M 4 {72 rotate 0 hpt L} repeat   closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave   translate 0 hpt M 4 {72 rotate
0 hpt L} repeat   closepath fill grestore } def /Circle { stroke []
0 setdash 2 copy   hpt 0 360 arc stroke Pnt } def /CircleF { stroke
[] 0 setdash hpt 0 360 arc fill } def /C0 { BL [] 0 setdash 2 copy
moveto vpt 90 450  arc } bind def /C1 { BL [] 0 setdash 2 copy    
   moveto        2 copy  vpt 0 90 arc closepath fill              
 vpt 0 360 arc closepath } bind def /C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill                vpt 0 360
arc closepath } bind def /C3 { BL [] 0 setdash 2 copy moveto      
 2 copy  vpt 0 180 arc closepath fill                vpt 0 360 arc
closepath } bind def /C4 { BL [] 0 setdash 2 copy moveto        2 copy
 vpt 180 270 arc closepath fill                vpt 0 360 arc closepath
} bind def /C5 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0
90 arc        2 copy moveto        2 copy  vpt 180 270 arc closepath
fill                vpt 0 360 arc } bind def /C6 { BL [] 0 setdash
2 copy moveto       2 copy  vpt 90 270 arc closepath fill         
     vpt 0 360 arc closepath } bind def /C7 { BL [] 0 setdash 2 copy
moveto       2 copy  vpt 0 270 arc closepath fill               vpt
0 360 arc closepath } bind def /C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill               vpt 0 360
arc closepath } bind def /C9 { BL [] 0 setdash 2 copy moveto      
2 copy  vpt 270 450 arc closepath fill               vpt 0 360 arc
closepath } bind def /C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt
270 360 arc closepath fill        2 copy moveto        2 copy vpt 90
180 arc closepath fill                vpt 0 360 arc closepath } bind
def /C11 { BL [] 0 setdash 2 copy moveto        2 copy  vpt 0 180 arc
closepath fill        2 copy moveto        2 copy  vpt 270 360 arc
closepath fill                vpt 0 360 arc closepath } bind def /C12
{ BL [] 0 setdash 2 copy moveto        2 copy  vpt 180 360 arc closepath
fill                vpt 0 360 arc closepath } bind def /C13 { BL []
0 setdash  2 copy moveto        2 copy  vpt 0 90 arc closepath fill
       2 copy moveto        2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def /C14 { BL [] 0 setdash
2 copy moveto        2 copy  vpt 90 360 arc closepath fill        
       vpt 0 360 arc } bind def /C15 { BL [] 0 setdash 2 copy vpt 0
360 arc closepath fill                vpt 0 360 arc closepath } bind
def /Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def /Square { dup Rec } bind
def /Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def /S0
{ BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def /S2
{ BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare
} bind def /S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt
Rec fill Bsquare } bind def /S4 { BL [] 0 setdash 2 copy exch vpt sub
exch vpt sub vpt Square fill Bsquare } bind def /S5 { BL [] 0 setdash
2 copy 2 copy vpt Square fill        exch vpt sub exch vpt sub vpt
Square fill Bsquare } bind def /S6 { BL [] 0 setdash 2 copy exch vpt
sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def /S7 { BL [] 0
setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill        2
copy vpt Square fill        Bsquare } bind def /S8 { BL [] 0 setdash
2 copy vpt sub vpt Square fill Bsquare } bind def /S9 { BL [] 0 setdash
2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def /S10 { BL [] 0
setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt
Square fill        Bsquare } bind def /S11 { BL [] 0 setdash 2 copy
vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def /S12 { BL [] 0 setdash 2 copy exch vpt sub
exch vpt sub vpt2 vpt Rec fill Bsquare } bind def /S13 { BL [] 0 setdash
2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill        2 copy vpt
Square fill Bsquare } bind def /S14 { BL [] 0 setdash 2 copy exch vpt
sub exch vpt sub vpt2 vpt Rec fill        2 copy exch vpt sub exch
vpt Square fill Bsquare } bind def /S15 { BL [] 0 setdash 2 copy Bsquare
fill Bsquare } bind def /D0 { gsave translate 45 rotate 0 0 S0 stroke
grestore } bind def /D1 { gsave translate 45 rotate 0 0 S1 stroke grestore
} bind def /D2 { gsave translate 45 rotate 0 0 S2 stroke grestore }
bind def /D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind
def /D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def /D6
{ gsave translate 45 rotate 0 0 S6 stroke grestore } bind def /D7 {
gsave translate 45 rotate 0 0 S7 stroke grestore } bind def /D8 { gsave
translate 45 rotate 0 0 S8 stroke grestore } bind def /D9 { gsave translate
45 rotate 0 0 S9 stroke grestore } bind def /D10 { gsave translate
45 rotate 0 0 S10 stroke grestore } bind def /D11 { gsave translate
45 rotate 0 0 S11 stroke grestore } bind def /D12 { gsave translate
45 rotate 0 0 S12 stroke grestore } bind def /D13 { gsave translate
45 rotate 0 0 S13 stroke grestore } bind def /D14 { gsave translate
45 rotate 0 0 S14 stroke grestore } bind def /D15 { gsave translate
45 rotate 0 0 S15 stroke grestore } bind def /DiaE { stroke [] 0 setdash
vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt
V closepath stroke } def /BoxE { stroke [] 0 setdash exch hpt sub exch
vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath
stroke } def /TriUE { stroke [] 0 setdash vpt 1.12 mul add M   hpt
neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath
stroke } def /TriDE { stroke [] 0 setdash vpt 1.12 mul sub M   hpt
neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62 mul V closepath
stroke } def /PentE { stroke [] 0 setdash gsave   translate 0 hpt M
4 {72 rotate 0 hpt L} repeat   closepath stroke grestore } def /CircE
{ stroke [] 0 setdash   hpt 0 360 arc stroke } def /Opaque { gsave
closepath 1 setgray fill grestore 0 setgray closepath } def /DiaW {
stroke [] 0 setdash vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt
vpt V hpt neg vpt V Opaque stroke } def /BoxW { stroke [] 0 setdash
exch hpt sub exch vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2
neg 0 V Opaque stroke } def /TriUW { stroke [] 0 setdash vpt 1.12 mul
add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62
mul V Opaque stroke } def /TriDW { stroke [] 0 setdash vpt 1.12 mul
sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V   hpt neg vpt -1.62
mul V Opaque stroke } def /PentW { stroke [] 0 setdash gsave   translate
0 hpt M 4 {72 rotate 0 hpt L} repeat   Opaque stroke grestore } def
/CircW { stroke [] 0 setdash   hpt 0 360 arc Opaque stroke } def /BoxFill
{ gsave Rec 1 setgray fill grestore } def end

 /gnudict 40 dict def gnudict begin /Color false def /Solid false def
/gnulinewidth 5.000 def /vshift -33 def /dl {10 mul} def /hpt 31.5
def /vpt 31.5 def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M 0 vshift R show } def /Rshow { currentpoint
stroke M dup stringwidth pop neg vshift R show } def /Cshow { currentpoint
stroke M dup stringwidth pop -2 div vshift R show } def /DL { Color
{setrgbcolor Solid {pop []} if 0 setdash } {pop pop pop Solid {pop
[]} if 0 setdash} ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth
} def /AL { stroke gnulinewidth 2 div setlinewidth } def /PL { stroke
gnulinewidth setlinewidth } def /LTb { BL [] 0 0 0 DL } def /LTa {
AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def /LT0 { PL [] 0 1 0
DL } def /LT1 { PL [4 dl 2 dl] 0 0 1 DL } def /LT2 { PL [2 dl 3 dl]
1 0 0 DL } def /LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5
dl 2 dl 1 dl 2 dl] 0 1 1 DL } def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1
1 0 DL } def /LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 {
PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl
2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def /P { stroke
[] 0 setdash currentlinewidth 2 div sub M 0 currentlinewidth V stroke
} def /D { stroke [] 0 setdash 2 copy vpt add M hpt neg vpt neg V hpt
vpt neg V hpt vpt V hpt neg vpt V closepath stroke P } def /A { stroke
[] 0 setdash vpt sub M 0 vpt2 V currentpoint stroke M hpt neg vpt neg
R hpt2 0 V stroke } def /B { stroke [] 0 setdash 2 copy exch hpt sub
exch vpt add M 0 vpt2 neg V hpt2 0 V 0 vpt2 V hpt2 neg 0 V closepath
stroke P } def /C { stroke [] 0 setdash exch hpt sub exch vpt add M
hpt2 vpt2 neg V currentpoint stroke M hpt2 neg 0 R hpt2 vpt2 V stroke
} def /T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M hpt neg vpt
-1.62 mul V hpt 2 mul 0 V hpt neg vpt 1.62 mul V closepath stroke P
} def /S { 2 copy A C} def end

 /gnudict 40 dict def gnudict begin /Color false def /Solid false def
/gnulinewidth 5.000 def /vshift -33 def /dl {10 mul} def /hpt 31.5
def /vpt 31.5 def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M 0 vshift R show } def /Rshow { currentpoint
stroke M dup stringwidth pop neg vshift R show } def /Cshow { currentpoint
stroke M dup stringwidth pop -2 div vshift R show } def /DL { Color
{setrgbcolor Solid {pop []} if 0 setdash } {pop pop pop Solid {pop
[]} if 0 setdash} ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth
} def /AL { stroke gnulinewidth 2 div setlinewidth } def /PL { stroke
gnulinewidth setlinewidth } def /LTb { BL [] 0 0 0 DL } def /LTa {
AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def /LT0 { PL [] 0 1 0
DL } def /LT1 { PL [4 dl 2 dl] 0 0 1 DL } def /LT2 { PL [2 dl 3 dl]
1 0 0 DL } def /LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5
dl 2 dl 1 dl 2 dl] 0 1 1 DL } def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1
1 0 DL } def /LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 {
PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl
2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def /P { stroke
[] 0 setdash currentlinewidth 2 div sub M 0 currentlinewidth V stroke
} def /D { stroke [] 0 setdash 2 copy vpt add M hpt neg vpt neg V hpt
vpt neg V hpt vpt V hpt neg vpt V closepath stroke P } def /A { stroke
[] 0 setdash vpt sub M 0 vpt2 V currentpoint stroke M hpt neg vpt neg
R hpt2 0 V stroke } def /B { stroke [] 0 setdash 2 copy exch hpt sub
exch vpt add M 0 vpt2 neg V hpt2 0 V 0 vpt2 V hpt2 neg 0 V closepath
stroke P } def /C { stroke [] 0 setdash exch hpt sub exch vpt add M
hpt2 vpt2 neg V currentpoint stroke M hpt2 neg 0 R hpt2 vpt2 V stroke
} def /T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M hpt neg vpt
-1.62 mul V hpt 2 mul 0 V hpt neg vpt 1.62 mul V closepath stroke P
} def /S { 2 copy A C} def end

 /gnudict 40 dict def gnudict begin /Color false def /Solid false def
/gnulinewidth 5.000 def /vshift -33 def /dl {10 mul} def /hpt 31.5
def /vpt 31.5 def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M 0 vshift R show } def /Rshow { currentpoint
stroke M dup stringwidth pop neg vshift R show } def /Cshow { currentpoint
stroke M dup stringwidth pop -2 div vshift R show } def /DL { Color
{setrgbcolor Solid {pop []} if 0 setdash } {pop pop pop Solid {pop
[]} if 0 setdash} ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth
} def /AL { stroke gnulinewidth 2 div setlinewidth } def /PL { stroke
gnulinewidth setlinewidth } def /LTb { BL [] 0 0 0 DL } def /LTa {
AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def /LT0 { PL [] 0 1 0
DL } def /LT1 { PL [4 dl 2 dl] 0 0 1 DL } def /LT2 { PL [2 dl 3 dl]
1 0 0 DL } def /LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5
dl 2 dl 1 dl 2 dl] 0 1 1 DL } def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1
1 0 DL } def /LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 {
PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl
2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def /P { stroke
[] 0 setdash currentlinewidth 2 div sub M 0 currentlinewidth V stroke
} def /D { stroke [] 0 setdash 2 copy vpt add M hpt neg vpt neg V hpt
vpt neg V hpt vpt V hpt neg vpt V closepath stroke P } def /A { stroke
[] 0 setdash vpt sub M 0 vpt2 V currentpoint stroke M hpt neg vpt neg
R hpt2 0 V stroke } def /B { stroke [] 0 setdash 2 copy exch hpt sub
exch vpt add M 0 vpt2 neg V hpt2 0 V 0 vpt2 V hpt2 neg 0 V closepath
stroke P } def /C { stroke [] 0 setdash exch hpt sub exch vpt add M
hpt2 vpt2 neg V currentpoint stroke M hpt2 neg 0 R hpt2 vpt2 V stroke
} def /T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M hpt neg vpt
-1.62 mul V hpt 2 mul 0 V hpt neg vpt 1.62 mul V closepath stroke P
} def /S { 2 copy A C} def end

 /gnudict 40 dict def gnudict begin /Color false def /Solid false def
/gnulinewidth 5.000 def /vshift -33 def /dl {10 mul} def /hpt 31.5
def /vpt 31.5 def /M {moveto} bind def /L {lineto} bind def /R {rmoveto}
bind def /V {rlineto} bind def /vpt2 vpt 2 mul def /hpt2 hpt 2 mul
def /Lshow { currentpoint stroke M 0 vshift R show } def /Rshow { currentpoint
stroke M dup stringwidth pop neg vshift R show } def /Cshow { currentpoint
stroke M dup stringwidth pop -2 div vshift R show } def /DL { Color
{setrgbcolor Solid {pop []} if 0 setdash } {pop pop pop Solid {pop
[]} if 0 setdash} ifelse } def /BL { stroke gnulinewidth 2 mul setlinewidth
} def /AL { stroke gnulinewidth 2 div setlinewidth } def /PL { stroke
gnulinewidth setlinewidth } def /LTb { BL [] 0 0 0 DL } def /LTa {
AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def /LT0 { PL [] 0 1 0
DL } def /LT1 { PL [4 dl 2 dl] 0 0 1 DL } def /LT2 { PL [2 dl 3 dl]
1 0 0 DL } def /LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def /LT4 { PL [5
dl 2 dl 1 dl 2 dl] 0 1 1 DL } def /LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1
1 0 DL } def /LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def /LT7 {
PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def /LT8 { PL [2 dl
2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def /P { stroke
[] 0 setdash currentlinewidth 2 div sub M 0 currentlinewidth V stroke
} def /D { stroke [] 0 setdash 2 copy vpt add M hpt neg vpt neg V hpt
vpt neg V hpt vpt V hpt neg vpt V closepath stroke P } def /A { stroke
[] 0 setdash vpt sub M 0 vpt2 V currentpoint stroke M hpt neg vpt neg
R hpt2 0 V stroke } def /B { stroke [] 0 setdash 2 copy exch hpt sub
exch vpt add M 0 vpt2 neg V hpt2 0 V 0 vpt2 V hpt2 neg 0 V closepath
stroke P } def /C { stroke [] 0 setdash exch hpt sub exch vpt add M
hpt2 vpt2 neg V currentpoint stroke M hpt2 neg 0 R hpt2 vpt2 V stroke
} def /T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M hpt neg vpt
-1.62 mul V hpt 2 mul 0 V hpt neg vpt 1.62 mul V closepath stroke P
} def /S { 2 copy A C} def end
 
@fedspecial end TeXDict begin
39158280 55380996 1000 600 600 (figures.dvi) @start
%DVIPSBitmapFont: Fa cmsy10 12 1
/Fa 1 1 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmsy8 8 2
/Fb 2 4 df<B812C0A32A037A9137>0 D<130C131EA50060EB01800078130739FC0C0FC0
007FEB3F80393F8C7F003807CCF83801FFE038007F80011EC7FCEB7F803801FFE03807CC
F8383F8C7F397F0C3F8000FCEB0FC039781E078000601301000090C7FCA5130C1A1D7C9E
23>3 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 8 1
/Fc 1 71 df<013FB7FCA2D900FEC7127F171F4A140FA20101150717065CA21303A25C16
300107147017004A136016E0130F15019138C007C091B5FC5BECC0074A6C5AA2133FA202
0090C7FCA25B92C8FC137EA213FEA25BA21201A25BA21203B512F0A2302D7DAC2D>70
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi12 12 12
/Fd 12 115 df<1618163C167CA2167816F8A216F01501A216E01503A216C01507A21680
150FA2ED1F00A2151E153EA2153C157CA2157815F8A25D1401A24A5AA25D1407A25D140F
A292C7FC5CA2141E143EA2143C147CA25CA25C1301A25C1303A25C1307A25C130FA291C8
FC5BA2133EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C9FC5AA2
121E123EA2123C127CA2127812F8A25A126026647BCA31>61 D<91B87E19F019FC020090
39C00007FF6F489038007FC003FFED1FE0737E93C86C7E737E19014A707E5D1A7FA20203
EF3F805DA21BC014075DA3140F4B17E0A3141F4B17C0A3143F4B167FA3027F18804B16FF
A302FF180092C95A62A24917034A5F19076201034D5A5C4F5A620107173F4A5F4FC7FC19
FE010F4C5A4A15034E5AF00FE0011F4C5A4A4B5A06FFC8FC013FED01FCEF0FF84AEC3FE0
01FF913803FF80B848C9FC17F094CAFC4B447CC351>68 D<91B912FCA3020001C0C7123F
6F48EC03F803FF1501190093C91278A21A385C5DA3020317305DA314074B1460A218E002
0F4B13005DA21701021F5D4B13031707170F023F027FC8FC92B6FCA391397FC0007E4B13
1EA2170E02FF140C92C7FCA2171C49031813035C611906010392C7FC4A160E190C191C01
0717184A163819301970130F4A5E180161011F16034A15074E5A013F163F4EC7FC4AEC03
FF01FFED3FFEB9FCA26046447CC348>I<91B612F8A3020001E0C8FC6F5A4B5AA293C9FC
A35C5DA314035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314FF92CAFCA35B4A
16C0A21801010317804A15031900A201075E4A1506180E181E010F161C4A153C18381878
011F16F84A4A5A1703013F150F4D5A4A14FF01FF02075BB9FCA2603A447CC342>76
D<91B500C0020FB5128082A2DA007F9239007FE00070ED1F8074C7FCDBEFF8150E15CF03
C7160C70151C1401DB83FE1518A2DB81FF1538140303001630831A704A6D7E0206176016
3F7114E0140E020C6D6C5CA2706C1301141C021801075D83190302386D7E023094C8FC16
01715B147002606DEB8006A294387FC00E14E04A023F130C18E0191C0101ED1FF04A1618
170FF0F838130391C83807FC30A2943803FE705B01060301136018FF19E0010E81010C5F
187FA2131C0118705A1338181F137801FC70C9FCEA03FFB512F884180651447CC34E>78
D<91B712FEF0FFE019F802009039C0000FFE6F48EB01FF03FF9138007F80F13FC093C8EA
1FE0A24AEE0FF0A25D1AF81403A25DA21407F11FF05DA2020FEE3FE0A24B16C0197F021F
1780F1FF004B4A5A4E5A023F4B5A4E5A4BEC3FC006FFC7FC027FEC07FC92B612F0188003
80CAFC14FFA292CBFCA25BA25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133F
A25CEBFFE0B612E0A345447CC33F>80 D<9339FF8001800307EBF003033F13FC9239FF00
7E07DA01F8EB0F0FDA07E09038079F004A486DB4FC4AC77E023E804A5D187E5C495A183C
495AA213074A1538A3130F183080A295C7FC806D7E8014FF6D13E015FC6DEBFFC06D14FC
6E13FF6E14C0020F80020314F8EC003F03077F9238007FFE160F1603707E8283A283A212
06A4000E163EA2120C177E001E167CA25F5F003F15014C5A6D4A5A4C5A486C4AC8FC6D14
3ED87CF85CD8787E495A3AF01FC00FE0D8E007B51280010149C9FC39C0003FF039487BC5
3C>83 D<007FB56C91381FFFF8B65DA2000101E0C8000313006C0180ED01FCF000F0614E
5AA2017F4C5A96C7FC1806A2606E5DA2013F5E1870186060A24D5A6E4AC8FCA2011F1506
170E170C5FA26E5C5FA2010F5D16015F4CC9FCA26E13065EA201075C5EA25E16E06E5B4B
5A13034BCAFC1506A25D151CECFE185D13015D5DA26E5AA292CBFC5C13005C5CA25CA25C
45467BC339>86 D<020FB812C05C1A809326800001130003F8C7FCDA3FE04A5A03804A5A
92C8485A027E4B5A027C4B5A02784B5A4A4B5AA24A4A90C7FC4A4A5A01014B5A4D5A4A4A
5A01034B5A91C8485A4D5AA290C84890C8FC4C5A4C5A4C5A4C5A4C5A4C5A4C5AA24B90C9
FC4B5A4B5A4B5A4B5A4B5A4B5AA24B5A4A90CAFC4A5A4A4814064A5A4A5A4A48140E4A48
140CA24A48141C4990C8121849481538495A49485D495A494815F049485D170149481403
4890C8485A4848150F4848151F48484B5A484815FF48481403043F90C8FC48B8FCB9FC5F
42447BC343>90 D<14FE137FA3EB01FC13001301A25CA21303A25CA21307A25CA2130FA2
5CA2131FA25C163F013FECFFC0923803C0E09138000703ED1E0F491338ED701F017E13E0
EC01C001FE018013C00203EB07004948C8FC140E00015B5C495A5C3803FBC001FFC9FC80
14F83807F1FE9038F03F809038E00FE06E7E000F130381EBC001A2001FED01C017801380
A2003F15031700010013F05E481506160E007E150C161C00FE01005BED787048EC3FE000
38EC0F802B467BC433>107 D<01F8D903FCEC7F80D803FED91FFF903803FFE0D8071F90
3B7C0FC00F81F83E0E0F80E007E01C00FC001C9026C3C0030178137C271807C700D9F0E0
137E02CE902601F1C0133E003801DCDAFB80133F003001D892C7FCD90FF814FF0070495C
0060495CA200E04949485CD8C01F187E4A5C1200040715FE013F6091C75BA2040F140149
60017E5D1903041F5D13FE494B130762043F160E0001060F130C4992C713C0191F4CED80
1C00031A1849027E1638F2003004FE167000071A60494A16E0F201C0030192380F038000
0FF18700494AEC03FED80380D90070EC00F84F2D7DAB55>109 D<01F8EB0FC0D803FEEB
7FF0D8070FEBF038000E903883C07C3A0C07C701FC001C13CE0018EBDC03003813D80030
13F8D90FF013F800709038E000E0006015005C12E0EAC01F5C1200A2133F91C8FCA35B13
7EA313FE5BA312015BA312035BA312075BA3120F5BEA0380262D7DAB2C>114
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmr8 8 8
/Fe 8 109 df<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A2
48EB03E0A500FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C0
3E3803F0FC3800FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200
B3B113FE387FFFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048
EB0FC05A0060EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580
EC3F00147E147C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC00
0E14E0001FB5FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E
487FEC1F80003F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EB
FFC014F0EB00FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F800
6014C00070131F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<EB1F
C0EBFFF03803E07C3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381F
C00F01E01300EBF81E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380
D81F0013C0001E133F48EB1FE0007C13070078EB03F012F84813011400A46C14E0007813
01007C14C0003C13036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23>
56 D<13FF000713C0380F01F0381C00F8003F137C80A2143F001E7FC7FCA4EB07FF137F
3801FE1FEA07F0EA1FC0EA3F80EA7F00127E00FE14065AA3143F7E007E137F007FEBEF8C
391F83C7FC390FFF03F83901FC01E01F207D9E23>97 D<EA07C012FFA2120F1207AC14FE
9038C7FF809038CF03E09038DC01F09038F8007C49137E49133E497F1680A2150F16C0A9
ED1F80A216005D6D133E6D5B01B05B9038BC01F090380E07E0390607FF80260001FCC7FC
222F7EAD27>I<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>108
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmbx12 12 24
/Ff 24 117 df<ED0FFF4AB512C0020F14F0027F80903A01FFF803FC499038C000FE010F
EB00034948497E49485B5C495A4C138001FF6E13005CA3705AEE01F893C8FCA74BB51280
B9FCA5C69038E00003B3B0007FD9FFC1B6FCA538467EC53E>12 D<EA07C0EA1FF0EA3FF8
EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F788E1F>46 D<EC3FF849B5FC010F14
E0013F14F890397FF01FFC9039FFC007FE4890380001FF48486D1380000716C049147F00
0F16E049143F001F16F0A2003F16F8A249141F007F16FCA600FF16FEB3A3007F16FCA56C
6CEC3FF8A3001F16F0A2000F16E06D147F000716C06D14FF6C6C4913806C6D4813006C6D
485A90397FF01FFC6DB55A010F14E0010314809026003FF8C7FC2F427CC038>48
D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>
I<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE0007FFFD81F806D
138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17
F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF0
4A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC017C1401491403
48B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF0010713FF011F14C0017F
14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F16C07FA66C5A6C48
15806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC15F815FF16C090
C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0FC0EA3FF0487EA248
7EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D80FFEEBFFFE6CB612
F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<163FA25E5E5D5DA25D5D5D5D
A25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C14F8EB01F0EB03E013
0714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC123E5A12FCB91280A5C8
000F90C7FCAC027FB61280A531417DC038>I<0007150301E0143F01FFEB07FF91B6FC5E
5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1B5FC01C714C001DF14F090
39FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C4815E0C8FC6F13F0A317F8
A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC74813C0123E003F4A1380D8
1FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F1480010F01FCC7FC010113C0
2D427BC038>I<4AB47E021F13F0027F13FC49B6FC01079038807F8090390FFC001FD93F
F014C04948137F4948EBFFE048495A5A1400485A120FA248486D13C0EE7F80EE1E00003F
92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091B512F89039F9F01FFC9039FBC0
07FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A317F85BA4127FA5123FA217F07F
121FA2000F4A13E0A26C6C15C06D4913806C018014006C6D485A6C9038E01FFC6DB55A01
1F5C010714C0010191C7FC9038003FF02D427BC038>I<121E121F13FC90B712FEA45A17
FC17F817F017E017C0A2481680007EC8EA3F00007C157E5E00785D15014B5A00F84A5A48
4A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2141F5D143FA2147F5D14FFA25B
A35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<EC7FF00103B5FC010F14C0013F
14F090397F801FFC3A01FC0003FE48486D7E497F4848EC7F80163F484815C0A2001F151F
A27FA27F7F01FE143F6D158002C0137F02F014006C01FC5B6E485A6C9038FF83FCEDE7F8
6CECFFE06C5D6C92C7FC6D14C06D80010F14F882013F8090B7FC48013F14802607FC0F14
C0260FF80314E04848C6FC496D13F0003F141F48481307496D13F8150000FF157F90C812
3F161F160FA21607A36D15F0127F160F6D15E06C6C141F6DEC3FC06C6CEC7F80D80FFE90
3801FF003A07FFC00FFE6C90B55AC615F0013F14C0010F91C7FC010013F02D427BC038>
I<EC7FF0903807FFFE011F6D7E017F14E09039FFE03FF0489038800FF848496C7E484880
48486D7E001F80003F1680A2484815C08117E0A212FF17F0A617F8A45D127FA3003F5CA2
6C7E5D6C6C5B12076C6C133E6CEBC07C6CEBFFF8013F5B010F01C013F00101130090C8FC
A217E05DA2EA03C0D80FF015C0487E486C491380A217004B5A150F5E49495A6C48495A01
C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14F86C6C13E0D907FEC8FC2D427BC038>I<90
3801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F
7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313
E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFF
C03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF807
FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC12
7FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01FEF
6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>100
D<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48
486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FC
A5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB
3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<DAFF
E0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0F
FC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F
5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFC
A47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC0
14074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC
3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>
103 D<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC91
38CF801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E
>I<EC03E0EC0FF8EC1FFCEC3FFEA2EC7FFFA5EC3FFEA2EC1FFCEC0FF8EC03E091C7FCAA
EC01FF0103B5FCA5EB000F80B3B3A7EA1F80EA3FC0EA7FE0EAFFF0EC0FFEA215FC141F01
E013F8007FEB3FF0393FC0FFE06CB512806C1400000313FCC613C0205A86C522>106
D<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F00039039
9F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>110
D<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA
3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700A4
6C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7
FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E
02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF6C496D13804A15C04A
6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913
806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7FCED1FF092C9FCADB6
7EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE00
0313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7D
AC2E>114 D<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C712
1F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C80
0003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15
C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC
232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B512
80B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F
006DB5FC6D13FC01015B9038003FE023407EBE2C>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmr12 12 53
/Fg 53 120 df<1618163CA2167EA216FFA24B7FA24B6C7EA29238063FE0A24B6C7EA24B
6C7EA292383807FC153092387003FE15609238E001FF15C002016D7F5D02036E7E92C7FC
4A6E7E1406020E6E7E140C021C6E7E141802386E7E143002706E7E146002E06E7E5C0101
6F7F5C0103707E91C9FC183F010683181F4983180F49831807498318034983A249707EA2
4848701380A248CBEA7FC0A20006F03FE0A248F01FF0A2001FBA12F8A24819FCA24819FE
A2BCFC48477CC651>1 D<9239FFC001FC020F9038F80FFF913B3F803E3F03C0913BFC00
077E07E0D903F890390FFC0FF0494890383FF81F4948EB7FF0495A494814E049C7FCF00F
E04991393FC0038049021F90C7FCAFB912F0A3C648C7D81FC0C7FCB3B2486CEC3FF0007F
D9FC0FB512E0A33C467EC539>11 D<140C141C1438147014E0EB01C01303EB0780EB0F00
A2131E5BA25B13F85B12015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA4127CA3
12FCB3A2127CA3127EA4123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13787F
A27F7FA2EB0780EB03C01301EB00E014701438141C140C166476CA26>40
D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378137C133C133E131E131FA2EB0F
80A3EB07C0A3EB03E0A314F0A21301A214F8A41300A314FCB3A214F8A31301A414F0A213
03A214E0A3EB07C0A3EB0F80A3EB1F00A2131E133E133C137C13785BA2485A485AA2485A
48C7FC120E5A5A5A5A5A16647BCA26>I<121EEA7F8012FF13C0A213E0A3127FEA1E6012
00A413E013C0A312011380120313005A1206120E5A5A5A12600B1D78891B>44
D<B612C0A61A067F9721>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A78891B>I<16
18163C167CA2167816F8A216F01501A216E01503A216C01507A21680150FA2ED1F00A215
1E153EA2153C157CA2157815F8A25D1401A24A5AA25D1407A25D140FA292C7FC5CA2141E
143EA2143C147CA25CA25C1301A25C1303A25C1307A25C130FA291C8FC5BA2133EA2133C
137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C9FC5AA2121E123EA2123C12
7CA2127812F8A25A126026647BCA31>I<14FF010713E090381F81F890383E007C01FC13
3F4848EB1F8049130F4848EB07C04848EB03E0A2000F15F0491301001F15F8A2003F15FC
A390C8FC4815FEA54815FFB3A46C15FEA56D1301003F15FCA3001F15F8A26C6CEB03F0A3
6C6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F00013E137C90381F81F8903807FFE0
010090C7FC28447CC131>I<143014F013011303131F13FFB5FC13E713071200B3B3B049
7E497E007FB6FCA3204278C131>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001
FE48486C7E000EC7EA7F8048EC3FC0ED1FE04815F00030140F007015F800601407126CB4
15FC7F7F1503A46C4813076CC7FCC8FC16F8A2150F16F0151F16E0A2ED3FC0ED7F801600
5D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C5C495A495A495A49C7120C131E5B013814
185B5B485A4848143848C81230000E1570001FB612F0A25A5AB712E0A326427BC131>I<
49B4FC010F13E0013F13FC9038FE01FE3A01F0007F80D803C0EB3FC048C7EA1FE0120EED
0FF0EA0FE0486C14F8A215077F5BA26C48130FEA03C0C813F0A3ED1FE0A2ED3FC01680ED
7F0015FE4A5AEC03F0EC1FC0D90FFFC7FC15F090380001FCEC007FED3F80ED1FC0ED0FE0
16F0ED07F816FC150316FEA2150116FFA3121EEA7F80487EA416FE491303A2007EC713FC
00701407003015F80038140F6C15F06CEC1FE06C6CEB3FC0D803E0EB7F803A01FE01FE00
39007FFFF8010F13E0010190C7FC28447CC131>I<ED0380A21507150FA2151F153FA215
7F15FFA25CEC03BF153F14071406140C141C141814301470146014C013011480EB03005B
13065B131C13185B1370136013E0485A5B120390C7FC1206120E120C5A123812305A12E0
B812C0A3C8383F8000ADEDFFE0027FEBFFC0A32A437DC231>I<000615C0D807C0130701
FCEB7F8090B612005D5D5D15E0158026063FFCC7FC90C9FCAE14FF010713C090381F01F0
90383800FC01F0137ED807C07F49EB1F8016C090C7120F000615E0C8EA07F0A316F81503
A216FCA5123E127F487EA416F890C712075A006015F0A20070140F003015E00038EC1FC0
7E001EEC3F806CEC7F006C6C13FE6C6C485A3901F807F039007FFFE0011F90C7FCEB07F8
26447BC131>I<EC07FCEC3FFF91B512C0903903FC03E0903907E000F0D91FC0133849C7
1258017EEB01FC01FE1303491307485A485AA24848EB03F8000FEC01F092C7FC485AA348
5AA3127FA29038007F80903801FFF090380780FC39FF0E003E49EB1F8049EB0FC049EB07
E0136001E0EB03F04914F8150116FC5BED00FEA390C812FFA47EA57F123FA216FE121F15
016D14FC120FED03F86C7EED07F06C6C14E06C6CEB0FC06C6CEB1F80017EEB3F0090383F
80FE90380FFFF8010313E00100138028447CC131>I<121CA2EA1F8090B712C0A3481680
A217005E0038C8120C0030151C00705D0060153016705E5E4814014B5A4BC7FCC8120615
0E5D151815385D156015E04A5AA24A5A140792C8FC5CA25C141E143EA2147E147CA214FC
A21301A3495AA41307A6130FAA6D5AEB01C02A457BC231>I<14FF010713E0011F13F890
387F00FE01FC133FD801F0EB1F804848EB0FC049EB07E00007EC03F048481301A290C713
F8481400A47FA26D130116F07F6C6CEB03E013FC6C6CEB07C09039FF800F806C9038C01F
006CEBF03EECF87839007FFEF090383FFFC07F01077F6D13F8497F90381E7FFFD97C1F13
80496C13C02601E00313E048486C13F000079038007FF84848EB3FFC48C7120F003EEC07
FE150148140016FF167F48153FA2161FA56C151E007C153EA2007E153C003E157C6C15F8
6DEB01F06C6CEB03E06C6CEB07C0D803F8EB1F80C6B4EBFF0090383FFFFC010F13F00101
138028447CC131>I<14FF010713E0011F13F890387F80FC9038FC007E48487F4848EB1F
804848EB0FC0000FEC07E0485AED03F0485A16F8007F140190C713FCA25AA216FE1500A5
16FFA46C5CA36C7E5D121F7F000F5C6C6C130E150C6C6C131C6C6C5BD8007C5B90383F01
E090390FFF80FE903801FE0090C8FC150116FCA4ED03F8A216F0D80F801307486C14E048
6C130F16C0ED1F80A249EB3F0049137E001EC75A001C495A000F495A3907E01FE06CB512
80C649C7FCEB1FF028447CC131>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5
121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2B78AA1B>I<007FBAFCBB1280A26C1900CE
FCB0007FBAFCBB1280A26C190041187BA44C>61 D<16C04B7EA34B7EA34B7EA34B7EA3ED
19FEA3ED30FFA203707FED607FA203E07FEDC03FA2020180ED801FA2DA03007F160FA202
06801607A24A6D7EA34A6D7EA34A6D7EA20270810260147FA202E08191B7FCA249820280
C7121FA249C87F170FA20106821707A2496F7EA3496F7EA3496F7EA201788313F8486C83
D80FFF03037FB500E0027FEBFFC0A342477DC649>65 D<B8FC17E017FC00019039C00003
FF6C6C4801007FEF3FC0717E717E717E84170384170184A760A21703601707604D5A4D5A
EF7FC04DC7FCEE03FEEE3FF091B65A17FC0280C7B47EEF1FC0EF0FF0717E717E717E717E
1980187F19C0A2183F19E0A8F07FC0A2198018FF4D1300A24D5AEF0FFC4D5AEF7FE04848
6C903803FFC0B9C7FC17FC17C03B447CC345>I<DB0FFE146092B500C013E0020314F091
3A0FFC01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948
157F4948153F4948151F49C9120F485A491607120348481603A248481601A248481600A2
123FA2491760127FA31900485AAE6C7EA21960A2123F7FA2001F18E07F000F18C0A26C6C
160119806C6C160312016DEE07006C6C16066D6C150E6D6C5D6D6C5D6D6C15786D6C5D6D
6C4A5AD900FFEC0780DA3FC0011FC7FCDA0FFC13FC0203B512F0020014C0DB0FFEC8FC3B
487BC546>I<B8FC17F017FC00019039C00007FF6C499038007FC0017FED1FE0EF07F0EF
03FC717E717E84727E727E727EA2727E85180385A2180185A38584A31A80AD1A00A36061
A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FFED7FC0486D
D907FFC8FCB812FC17F094C9FC41447CC34B>I<B912F8A3000101C0C7127F6C6C48EC07
FC17011700187C183C181CA284A31806A4180704067FA395C7FCA4160EA2161E163E16FE
91B5FCA3EC8000163E161E160EA21606A319C0A3F0018093C7FCA41803A21900A260A260
A2181EA2183E187EEF01FE170748486C147FB95AA33A447CC342>I<B912F0A3000101C0
C7127F6C6C48EC0FF817031701170018781838A2181CA3180CA4180E1806160CA21800A5
161CA2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA793C8FCB08048487E
B612F8A337447CC340>I<B6D8C003B6FCA3000101E0C70007138026007F80913801FE00
B3A991B7FCA30280C71201B3AC2601FFE0913807FF80B6D8C003B6FCA340447CC349>72
D<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB612F0A31C447DC323>I<B56C9338
07FFFC6E5EA20001F1FE0026006FE0EE1BF8A3D967F01633A2D963F81663A3D961FC16C3
A3D960FEED0183A2027FED0303A36E6C1406A36E6C140CA26E6C1418A36E6C1430A36E6C
1460A26E6C14C0A36E6CEB0180A3037FEB0300A292383F8006A36F6C5AA36F6C5AA26F6C
5AA36F6C5AA36F6C5AA26FB45AA370C7FC13F0A2486C143ED80FFFEF0FFEB500F0011C01
07B512FCA34E447BC359>77 D<B56C020FB5FC8080C6040013F06D6CED1F80D96FF8ED0F
00A2D967FC1506EB63FEA2EB61FF01607FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E
7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8
A2EE07FCEE03FEA2EE01FF701386A2EF7FC6EF3FE6A2EF1FF6EF0FFEA217071703A21701
1700A201F0167E183E487ED80FFF161EB500F0150EA2180640447CC349>I<B712FCEEFF
C017F800019039C0000FFC6C6C48EB01FF9338007F80EF1FE0170FEF07F018F8EF03FCA2
18FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE
0FFC91B612F017800280C9FCB3AA3801FFE0B612C0A338447CC342>80
D<B712E016FF17C000019039C0003FF86C6C48EB03FCEE00FF717E717E717E717E717EA2
84170384A760A21707604D5AA24D5A4D5A4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC91
3980007F80EE0FE0707EEE03FC707E160083717EA2717EA784A71A6084171FA21AE0716C
13C02601FFE002071301B600C01680943801FC03943900FE0700CBEA3FFEF007F843467C
C348>82 D<B692383FFFF0A3000301E003071300C649ED01FC4A5E017F705A6E5E133F61
6E1501011F5FA26D6C4BC7FCA28001071606A26E150E0103160CA26D6C5DA2806D5EA26F
1470027F156081023F5DA281021F4A5AA26F1303020F92C8FC8102071406A26F130E0203
140CA26E6C5BA2816E5CA2EE8070037F1360A26F6C5AA216E092381FE180A216F3030F90
C9FC16FBED07FEA36F5AA36F5AA26F5AA3166044467EC349>86 D<EAFFFCA4EAF000B3B3
B3B3B3A2EAFFFCA40E6476CA1B>91 D<EAFFFCA4EA003CB3B3B3B3B3A2EAFFFCA40E647E
CA1B>93 D<EB07FC90383FFF809038F80FE03903C003F048C66C7E000E6D7ED80FC0137E
486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90380FFE1FEB3FC0EBFF00
EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F007F14EF6D9038C7E0C0
003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A001FE0007C2B2E7CAC31>
97 D<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C00003140F48
48EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7FA2123F
16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F131E90
381FC078903807FFF001001380242E7DAC2B>99 D<EB01FE903807FFC090381F03F09038
7E00FC49137E48487F485A4848EB1F80000F15C049130F121F484814E01507A2007F15F0
90C7FCA25AA390B6FCA290C9FCA67EA27FA2123F16306C7E1670000F15606D14E06C6C14
C0000314016C6CEB03806C6CEB0700013E131E90381F80F8903803FFE0010090C7FC242E
7DAC2B>101 D<EC0FE0EC7FF8903801F81E903803F03F90390FE07F8090381FC0FF5C13
3F495AA2ED7F0001FE131C92C7FCAFB67EA3C648C8FCB3B2486C7E007F13FFA321467EC5
1E>I<EE0F80D901FCEB7FE0903A0FFF81F0F090393F07E3819039FC01FF033A01F800FE
014848017E13E00007027FC7FC497F000F8149131F001F81A9000F5D6D133F000792C7FC
6D5B0003147E6C6C5B6D485A3903BF07E090380FFF80260701FCC8FC90CAFCA25AA37F6C
7E7F90B512F86C14FF16E06C15F86C6C8048B67E3A07C0000FFF48481300003FC8EA3F80
003E151F48ED0FC0A2481507A56C150F007C1680007E151F003E16006C153E6C6C5CD807
E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7FC010113E02C427DAC31>I<EA01FC
12FFA3120712031201B3EC01FE913807FFC091381E07F091383801F802707FECE000D9FD
C07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8F83F13FEA32F457DC436>I<EA
01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC12FFA3120712031201B3B0487EB512
F8A315437DC21C>I<143C14FFA2491380A46D1300A2143C91C7FCADEC7F80EB3FFFA313
00147F143FB3B3AA123E127F39FF807F00A2147EA25C6C485A383C01F06C485A3807FF80
D801FEC7FC195785C21E>I<D801FC01FFEC1FE000FF010701E0EBFFFC913B0F03F801E0
7F913C3C01FC07803F800007903C7000FE0E001FC0000349D97E1C130F2601FDC0D97F38
804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A8486C4A6C497EB5D8F81FB50003B5
12E0A34B2C7DAB52>109 D<3901FC01FE00FF903807FFC091381E07F091383801F80007
01707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8F83F
13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F496D7E496D7E4848
6D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0AA6C16
80A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C
495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3901FC03FC00FF
90380FFF8091383C07E091387001F83A07FDE000FE00030180137FD801FFEC3F8091C7EA
1FC04915E049140F17F0160717F8160317FCA3EE01FEABEE03FCA3EE07F8A217F0160F6D
15E0EE1FC06D143F17806EEB7E00D9FDC05B9039FCF003F891383C0FE091381FFF80DA03
FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<3903F803F000FFEB1FFCEC3C3EEC707F
0007EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA320
2C7DAB26>114 D<90383FE0183901FFFC383907E01F78390F0003F8001E130148130000
7C1478127800F81438A21518A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14
C06C14E0C614F0011F13F81300EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C
6C147C15786C14F86CEB01F039F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26
>I<1306A5130EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4
150CAA017E131C017F1318A26D133890381F8030ECC070903807E0E0903801FFC0903800
7F001E3E7EBC26>I<D801FC147F00FFEC3FFFA300071401000380000181B3A85EA35DA2
12006D5B017E9038077F80017F010E13C06D011C13FE90380FC078903803FFF09026007F
8013002F2D7DAB36>I<B539F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E12
00160C017F5CA280013F5CA26E1370011F146080010F5CA2ECF00101075CA26D6C48C7FC
A26E5A01011306A26D6C5AA214FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC
2E2C7EAA33>I<B500E0B539E03FFF80A30007903C000FFE000FFC00D803FCD903F8EB03
F8F001E0120103015D6D80000060A26D6E13036DD9037E91C7FCA20280017F5B013FD906
3F1306A2D91FC06E5AED0C1FA2D90FE06E5AED180FA2D907F06E5AED3007A2D903F86E5A
ED6003A2902601FCE06D5AEDC00117FCD900FFECFD80ED800017FF027F92C8FC92C77EA2
6E147E023E143EA2021E143C021C141CA2412C7EAA46>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 10 1
10 9 bop 324 3514 a @beginspecial @setspecial
 gnudict begin gsave 50 50 translate 0.100 0.100 scale 0 setgray /Helvetica
findfont 100 scalefont setfont newpath -500.000000 -500.000000 translate
LTa 600 688 M 2817 0 V LTb 600 251 M 63 0 V 2754 0 R -63 0 V 600 470
M 63 0 V 2754 0 R -63 0 V 600 688 M 63 0 V 2754 0 R -63 0 V 600 907
M 63 0 V 2754 0 R -63 0 V 600 1125 M 63 0 V 2754 0 R -63 0 V 600 1344
M 63 0 V 2754 0 R -63 0 V 600 1563 M 63 0 V 2754 0 R -63 0 V 600 1781
M 63 0 V 2754 0 R -63 0 V 600 2000 M 63 0 V 2754 0 R -63 0 V 600 251
M 0 63 V 0 1795 R 0 -63 V 1002 251 M 0 63 V 0 1795 R 0 -63 V 1405 251
M 0 63 V 0 1795 R 0 -63 V 1807 251 M 0 63 V 0 1795 R 0 -63 V 2210 251
M 0 63 V 0 1795 R 0 -63 V 2612 251 M 0 63 V 0 1795 R 0 -63 V 3015 251
M 0 63 V 0 1795 R 0 -63 V 3417 251 M 0 63 V 0 1795 R 0 -63 V 600 251
M 2817 0 V 0 1858 V -2817 0 V 600 251 L LT0 3114 1946 M 180 0 V 600
611 M 2 0 V 3 0 V 5 0 V 6 -1 V 7 0 V 8 -1 V 10 -1 V 11 -1 V 13 -1 V
14 -1 V 15 -1 V 16 -2 V 18 -1 V 19 -2 V 20 -2 V 22 -2 V 22 -2 V 24
-2 V 25 -2 V 26 -3 V 27 -2 V 28 -3 V 30 -3 V 30 -3 V 31 -3 V 32 -3
V 34 -3 V 34 -4 V 34 -3 V 36 -4 V 37 -3 V 37 -4 V 38 -5 V 38 -4 V 40
-4 V 40 -5 V 40 -4 V 41 -5 V 41 -5 V 42 -4 V 43 -5 V 42 -4 V 43 -5
V 44 -4 V 43 -5 V 44 -4 V 44 -4 V 43 -5 V 44 -4 V 45 -3 V 44 -4 V 43
-3 V 44 -3 V 44 -3 V 43 -3 V 44 -2 V 43 -2 V 42 -2 V 43 -2 V 42 -1
V 41 0 V 41 -1 V 40 0 V 40 1 V 40 1 V 38 1 V 38 2 V 37 2 V 37 3 V 36
3 V 34 3 V 34 3 V 34 4 V 32 4 V 31 5 V 30 5 V 30 5 V 28 5 V 27 5 V
26 6 V 25 5 V 24 6 V 22 5 V 22 6 V 20 5 V 19 5 V 18 5 V 16 5 V 15 5
V 14 4 V 13 4 V 11 3 V 10 3 V 8 3 V 7 3 V 6 2 V 5 1 V 3 1 V 2 1 V LT1
3114 1846 M 180 0 V 600 601 M 2 0 V 3 0 V 5 0 V 6 0 V 7 -1 V 8 0 V
10 0 V 11 -1 V 13 -1 V 14 0 V 15 -1 V 16 -1 V 18 -1 V 19 -1 V 20 -1
V 22 -2 V 22 -1 V 24 -2 V 25 -1 V 26 -2 V 27 -2 V 28 -3 V 30 -2 V 30
-2 V 31 -3 V 32 -3 V 34 -2 V 34 -3 V 34 -3 V 36 -3 V 37 -4 V 37 -3
V 38 -3 V 38 -3 V 40 -3 V 40 -3 V 40 -3 V 41 -3 V 41 -3 V 42 -2 V 43
-2 V 42 -2 V 43 -1 V 44 -1 V 43 1 V 44 1 V 44 1 V 43 3 V 44 4 V 45
5 V 44 6 V 43 7 V 44 9 V 44 11 V 43 12 V 44 14 V 43 17 V 42 18 V 43
20 V 42 22 V 41 24 V 41 26 V 40 28 V 40 31 V 40 32 V 38 35 V 38 37
V 37 38 V 37 40 V 36 41 V 34 42 V 34 43 V 34 44 V 32 44 V 31 46 V 30
46 V 30 47 V 28 47 V 27 46 V 26 46 V 25 45 V 24 44 V 22 42 V 22 41
V 20 40 V 19 37 V 18 36 V 16 34 V 15 31 V 14 29 V 13 27 V 11 23 V 10
22 V 8 18 V 7 16 V 6 12 V 5 10 V 3 7 V 2 3 V stroke grestore end showpage
 
@endspecial
2197 2000 a Fg(DBHF,)32 b(Bonn)h(A)2271 1917 y(BHF,)g(Bonn)g(A)1785
3498 y Fd(k)1836 3513 y Fc(F)1927 3498 y Fg(\(fm)2077
3462 y Fb(\000)p Fe(1)2171 3498 y Fg(\))407 2530 y
 gsave currentpoint currentpoint translate 270 rotate neg exch neg
exch translate
 407
2530 a 156 2506 a Fg(E/A)g(\(MeV\))407 2530 y
 currentpoint grestore moveto
 407 2530
a 3109 3420 a Fg(2.2)-422 b(2)f(1.8)-460 b(1.6)f(1.4)h(1.2)-423
b(1)h(0.8)627 1879 y(120)627 2062 y(100)676 2243 y(80)676
2426 y(60)676 2608 y(40)676 2790 y(20)725 2973 y(0)644
3154 y(-20)644 3337 y(-40)1061 3717 y(Figure)31 b(10:)43
b Ff(dean)p 1772 3717 34 4 v 42 w(hjorthjensen)p 2422
3717 V 42 w(\014g10.ps)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
